// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id          String        @id @default(uuid()) 
  username    String?       @unique
  email       String        @unique
  password    String  
  admin       Boolean       @default(false)
  profile     Profiles? 
  createAt    DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()  

}


model Profiles  {
  id                Int                  @id @default(autoincrement())
  userId            String               @unique 
  user              Users                @relation(fields : [userId], references : [id])
  avatar            String?    
  age               DateTime?  
  height            Int?    
  weight            Decimal ? 
  genderId          Int?
  gender            Genders?              @relation(fields : [genderId], references : [id], onDelete: SetNull)
  activity_levelId  Int?         
  activity_level    Activity_levels?      @relation(fields : [activity_levelId], references : [id])
  reviews           Reviews[] 
  recipes           Recipes[]  
  favorites         Favorites[]

}

model Genders {
  id              Int         @id @default(autoincrement())
  gender          String      @unique
  profiles        Profiles[]
}

model Activity_levels  {
  id              Int         @id @default(autoincrement())
  activity_level  String      @unique
  description     String
  factor          Decimal
  profiles        Profiles[]
}

model Recipes  {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  prep_time         Int           
  cook_time         Int         
  authorId          Int   
  author            Profiles       @relation(fields : [authorId] , references : [id])
  created_at        DateTime       @default(now())         
  picture           String?         
  servings          Int     
  macro_recipeId    Int ?           @unique
  macro_recipe      Macros?         @relation(fields : [macro_recipeId] , references : [id], onDelete : SetNull)
  tag               RecipesOnTags[]
  reviews           ReviewsOnRecipes[]
  measures          IngredientsOnRecipes[]
  favoriteId        Int
  favorite          Favorites       @relation( fields : [favoriteId] , references : [id])
  youtube_link      String?          

}

model Ingredients  {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  unit_weight      Decimal?
  categoryId       Int
  category         Ingredient_categories @relation(fields : [categoryId] , references : [id] )
  // unit_measureId   Int
  // unit_measure     Unit_measures    @relation(fields : [unit_measureId] , references : [id]) 
  // unit_computeId   Int
  // unit_compute     Unit_computes    @relation(fields : [unit_computeId] ,  references : [id]) 
  macrosId         Int?
  macros           Macros?          @relation(fields : [macrosId] , references : [id] , onDelete : SetNull) 
  iconId           Int?
  icon             Icons?            @relation(fields : [iconId] , references : [id] , onDelete : SetNull)
  recipes          IngredientsOnRecipes[]

}

model Ingredient_categories  {
  id               Int            @id   @default(autoincrement())
  name    String         @unique
  ingredients      Ingredients[]

}

model  Unit_measures  {
  id              Int             @id@default(autoincrement())
  name            String          @unique
  abreviation     String
  equivalent      Decimal?
  // ingredients     Ingredients[]  
  IngredientsOnRecipes IngredientsOnRecipes[]
}

model  Unit_computes  {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  abreviation     String
  IngredientsOnRecipes IngredientsOnRecipes[]        
  // unit_measure    Unit_measures[]
  // ingredients     Ingredients[]
}


model Icons  {
  id              Int             @id @default(autoincrement())
  name            String          @unique 
  link            String
  image_key       String
  ingredients     Ingredients[]
  tags            TagsOnIcons[]       

}

model Tags  {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  recipe            RecipesOnTags[]  
  icons             TagsOnIcons[]

}

model TagsOnIcons {
  icon      Icons     @relation( fields : [iconId] , references : [id] , onDelete : Cascade)
  iconId    Int
  tag       Tags      @relation (fields : [tag_name] , references : [name] , onDelete : Cascade)
  tag_name  String
  @@id([iconId, tag_name])
}

model Reviews  {
  id                Int               @id @default(autoincrement())
  authorId          Int   
  author            Profiles          @relation( fields : [authorId] , references : [id]) 
  comment           String    
  rating            Int 
  recipes           ReviewsOnRecipes[]
  created_at        DateTime          @default(now())
  updated_at        DateTime?                  
}

model Macros {
  id                Int               @id @default(autoincrement())
  food              String?           @unique            
  calories          Decimal
  proteins          Decimal
  carbs             Decimal
  fat               Decimal
  water             Decimal
  ingredients       Ingredients[]
  recipe            Recipes?
}

model Favorites  {
  id                Int                 @id @default(autoincrement())
  profileId         Int           
  owner             Profiles             @relation( fields : [profileId] , references : [id])
  recipes           Recipes[]
}

model IngredientsOnRecipes  {
  qty               Decimal
  unit_measure_id   Int
  unit_measure      Unit_measures     @relation( fields : [unit_measure_id] , references : [id])
  unit_compute_id   Int? 
  unit_compute      Unit_computes?  @relation(fields : [unit_compute_id] , references : [id])
  ingredientId      Int
  ingredient        Ingredients       @relation( fields : [ingredientId] , references : [id] )
  recipeId          Int 
  recipe            Recipes           @relation( fields : [recipeId] , references : [id])

  @@id ([ingredientId , recipeId])
}

model ReviewsOnRecipes  {
  id                Int               @id @default(autoincrement())
  reviewId          Int
  review            Reviews           @relation( fields : [reviewId] , references : [id])
  recipeId          Int
  recipe            Recipes           @relation( fields : [recipeId] , references : [id])

}

model RecipesOnTags  {
  tagId             Int
  tag               Tags              @relation(fields : [tagId] , references : [id])
  recipeId          Int 
  recipe            Recipes           @relation(fields : [recipeId] , references : [id])

  @@id([tagId , recipeId])
}











